@inject NavigationManager NavigationManager;

<!-- MOBILE MENU START -->
<div class="iq-top-navbar">
    <div class="iq-navbar-custom">

        <div class="iq-sidebar-logo">
            <div class="top-logo">
                <a href="index.html" class="logo">
                    <img src="logo/khizooo-logo-100.png" class="img-fluid" alt="khizooo Logo">
                </a>
            </div>
        </div>

        <div class="navbar-breadcrumb">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item breadcrumb-color">khizooo.com</li>
                    @if (!string.IsNullOrEmpty(CurrentModule))
                    {
                        <li class="breadcrumb-item breadcrumb-color active" aria-current="page">@CurrentModule</li>
                    }
                    @if (!string.IsNullOrEmpty(CurrentPage))
                    {
                        <li class="breadcrumb-item breadcrumb-color active" aria-current="page">@CurrentPage</li>
                    }
                </ol>
            </nav>
        </div>

        <nav class="navbar navbar-expand-lg navbar-light p-0">
            <div class="iq-menu-bt align-self-center">
                <div class="wrapper-menu">
                    <div class="line-menu half start"></div>
                    <div class="line-menu"></div>
                    <div class="line-menu half end"></div>
                </div>
            </div>
        </nav>

    </div>
</div>
<!-- MOBILE MENU END -->
@code {
    string CurrentModule = string.Empty;
    string CurrentPage = string.Empty;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        UpdateCurrentPage();
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateCurrentPage();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateCurrentPage()
    {
        var uri = new Uri(NavigationManager.Uri);
        var segments = uri.Segments
            .Select(s => s.Trim('/'))
            .Where(s => !string.IsNullOrEmpty(s))
            .ToArray();

        // Get first segment as module, second as page
        CurrentModule = segments.Length > 0 ? FormatSegment(segments[0]) : "Landing Page";
        CurrentPage = segments.Length > 1 ? FormatSegment(segments[1]) : string.Empty;
    }

    private static string FormatSegment(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;
        input = input.Replace("-", " ");
        return char.ToUpper(input[0]) + input.Substring(1);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}